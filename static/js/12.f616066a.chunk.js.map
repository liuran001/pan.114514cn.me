{"version":3,"sources":["component/Modals/AddTag.js"],"names":["useStyles","makeStyles","theme","contentFix","padding","wrapper","margin","spacing","position","buttonProgress","color","palette","secondary","light","top","left","marginTop","marginLeft","content","display","textField","scroll","overflowX","dialogContent","pathSelect","icons","Circle","CircleOutline","Heart","HeartOutline","Hexagon","HexagonOutline","Hexagram","HexagramOutline","Rhombus","RhombusOutline","Square","SquareOutline","Triangle","AddTag","props","useTheme","t","useTranslation","React","useState","value","setValue","loading","setLoading","alignment","setAlignment","text","setColor","filename","tagName","path","input","setInput","pathSelectDialog","setPathSelectDialog","selectedPath","setSelectedPath","setSelectedPathName","handleInputChange","name","event","target","dispatch","useDispatch","ToggleSnackbar","useCallback","vertical","horizontal","msg","toggleSnackbar","classes","open","onClose","aria-labelledby","fullWidth","id","presentPath","selected","onSelect","folder","onClick","disabled","onChange","newValue","variant","aria-label","label","className","multiline","i18nKey","key","size","exclusive","newAlignment","Object","keys","map","index","style","alignSelf","API","post","expression","icon","then","response","onSuccess","type","data","catch","error","message"],"mappings":"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","file":"static/js/12.f616066a.chunk.js","sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport {\n    Button,\n    CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    makeStyles,\n    useTheme,\n} from \"@material-ui/core\";\nimport PathSelector from \"../FileManager/PathSelector\";\nimport { useDispatch } from \"react-redux\";\nimport API from \"../../middleware/Api\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport {\n    Circle,\n    CircleOutline,\n    Heart,\n    HeartOutline,\n    Hexagon,\n    HexagonOutline,\n    Hexagram,\n    HexagramOutline,\n    Rhombus,\n    RhombusOutline,\n    Square,\n    SquareOutline,\n    Triangle,\n} from \"mdi-material-ui\";\nimport { toggleSnackbar } from \"../../redux/explorer\";\nimport { Trans, useTranslation } from \"react-i18next\";\n\nconst useStyles = makeStyles((theme) => ({\n    contentFix: {\n        padding: \"10px 24px 0px 24px\",\n    },\n    wrapper: {\n        margin: theme.spacing(1),\n        position: \"relative\",\n    },\n    buttonProgress: {\n        color: theme.palette.secondary.light,\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        marginTop: -12,\n        marginLeft: -12,\n    },\n    content: {\n        padding: 0,\n        marginTop: 0,\n    },\n    marginTop: {\n        marginTop: theme.spacing(2),\n        display: \"block\",\n    },\n    textField: {\n        marginTop: theme.spacing(1),\n    },\n    scroll: {\n        overflowX: \"auto\",\n    },\n    dialogContent: {\n        marginTop: theme.spacing(2),\n    },\n    pathSelect: {\n        marginTop: theme.spacing(2),\n        display: \"flex\",\n    },\n}));\n\nconst icons = {\n    Circle: <Circle />,\n    CircleOutline: <CircleOutline />,\n    Heart: <Heart />,\n    HeartOutline: <HeartOutline />,\n    Hexagon: <Hexagon />,\n    HexagonOutline: <HexagonOutline />,\n    Hexagram: <Hexagram />,\n    HexagramOutline: <HexagramOutline />,\n    Rhombus: <Rhombus />,\n    RhombusOutline: <RhombusOutline />,\n    Square: <Square />,\n    SquareOutline: <SquareOutline />,\n    Triangle: <Triangle />,\n};\n\nexport default function AddTag(props) {\n    const theme = useTheme();\n    const { t } = useTranslation();\n\n    const [value, setValue] = React.useState(0);\n    const [loading, setLoading] = React.useState(false);\n    const [alignment, setAlignment] = React.useState(\"Circle\");\n    const [color, setColor] = React.useState(theme.palette.text.secondary);\n    const [input, setInput] = React.useState({\n        filename: \"\",\n        tagName: \"\",\n        path: \"/\",\n    });\n    const [pathSelectDialog, setPathSelectDialog] = React.useState(false);\n    const [selectedPath, setSelectedPath] = useState(\"\");\n    // eslint-disable-next-line\n    const [selectedPathName, setSelectedPathName] = useState(\"\");\n    const setMoveTarget = (folder) => {\n        const path =\n            folder.path === \"/\"\n                ? folder.path + folder.name\n                : folder.path + \"/\" + folder.name;\n        setSelectedPath(path);\n        setSelectedPathName(folder.name);\n    };\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const handleIconChange = (event, newAlignment) => {\n        if (newAlignment) {\n            setAlignment(newAlignment);\n        }\n    };\n\n    const handleColorChange = (event, newAlignment) => {\n        if (newAlignment) {\n            setColor(newAlignment);\n        }\n    };\n\n    const handleInputChange = (name) => (event) => {\n        setInput({\n            ...input,\n            [name]: event.target.value,\n        });\n    };\n\n    const dispatch = useDispatch();\n    const ToggleSnackbar = useCallback(\n        (vertical, horizontal, msg, color) =>\n            dispatch(toggleSnackbar(vertical, horizontal, msg, color)),\n        [dispatch]\n    );\n\n    const submitNewLink = () => {\n        setLoading(true);\n\n        API.post(\"/tag/link\", {\n            path: input.path,\n            name: input.tagName,\n        })\n            .then((response) => {\n                setLoading(false);\n                props.onClose();\n                props.onSuccess({\n                    type: 1,\n                    name: input.tagName,\n                    expression: input.path,\n                    color: theme.palette.text.secondary,\n                    icon: \"FolderHeartOutline\",\n                    id: response.data,\n                });\n            })\n            .catch((error) => {\n                ToggleSnackbar(\"top\", \"right\", error.message, \"error\");\n            })\n            .then(() => {\n                setLoading(false);\n            });\n    };\n\n    const submitNewTag = () => {\n        setLoading(true);\n\n        API.post(\"/tag/filter\", {\n            expression: input.filename,\n            name: input.tagName,\n            color: color,\n            icon: alignment,\n        })\n            .then((response) => {\n                setLoading(false);\n                props.onClose();\n                props.onSuccess({\n                    type: 0,\n                    name: input.tagName,\n                    color: color,\n                    icon: alignment,\n                    id: response.data,\n                });\n            })\n            .catch((error) => {\n                ToggleSnackbar(\"top\", \"right\", error.message, \"error\");\n            })\n            .then(() => {\n                setLoading(false);\n            });\n    };\n    const submit = () => {\n        if (value === 0) {\n            submitNewTag();\n        } else {\n            submitNewLink();\n        }\n    };\n    const selectPath = () => {\n        setInput({\n            ...input,\n            path: selectedPath === \"//\" ? \"/\" : selectedPath,\n        });\n        setPathSelectDialog(false);\n    };\n\n    const classes = useStyles();\n\n    return (\n        <Dialog\n            open={props.open}\n            onClose={props.onClose}\n            aria-labelledby=\"form-dialog-title\"\n            fullWidth\n        >\n            <Dialog\n                open={pathSelectDialog}\n                onClose={() => setPathSelectDialog(false)}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">\n                    {t(\"navbar.addTagDialog.selectFolder\")}\n                </DialogTitle>\n                <PathSelector\n                    presentPath=\"/\"\n                    selected={[]}\n                    onSelect={setMoveTarget}\n                />\n\n                <DialogActions>\n                    <Button onClick={() => setPathSelectDialog(false)}>\n                        {t(\"common:cancel\")}\n                    </Button>\n                    <Button\n                        onClick={selectPath}\n                        color=\"primary\"\n                        disabled={selectedPath === \"\"}\n                    >\n                        {t(\"common:ok\")}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <AppBar position=\"static\">\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    variant=\"fullWidth\"\n                    aria-label=\"full width tabs example\"\n                >\n                    <Tab label={t(\"navbar.addTagDialog.fileSelector\")} />\n                    <Tab label={t(\"navbar.addTagDialog.folderLink\")} />\n                </Tabs>\n            </AppBar>\n            {value === 0 && (\n                <DialogContent className={classes.dialogContent}>\n                    <TextField\n                        label={t(\"navbar.addTagDialog.tagName\")}\n                        id=\"filled-name\"\n                        value={input[\"tagName\"]}\n                        onChange={handleInputChange(\"tagName\")}\n                        fullWidth\n                        className={classes.textField}\n                    />\n                    <TextField\n                        id=\"filled-name\"\n                        label={t(\"navbar.addTagDialog.matchPattern\")}\n                        value={input[\"filename\"]}\n                        onChange={handleInputChange(\"filename\")}\n                        fullWidth\n                        multiline\n                        className={classes.textField}\n                    />\n                    <Typography variant=\"caption\" color={\"textSecondary\"}>\n                        <Trans i18nKey=\"navbar.addTagDialog.matchPatternDescription\">\n                            {[<code key={0} />, <code key={1} />]}\n                        </Trans>\n                    </Typography>\n                    <FormLabel className={classes.marginTop}>\n                        {t(\"navbar.addTagDialog.icon\")}\n                    </FormLabel>\n                    <div className={classes.scroll}>\n                        <ToggleButtonGroup\n                            size=\"small\"\n                            value={alignment}\n                            exclusive\n                            onChange={handleIconChange}\n                            className={classes.textField}\n                        >\n                            {Object.keys(icons).map((key, index) => (\n                                <ToggleButton key={index} value={key}>\n                                    {icons[key]}\n                                </ToggleButton>\n                            ))}\n                        </ToggleButtonGroup>\n                    </div>\n                    <FormLabel className={classes.marginTop}>\n                        {t(\"navbar.addTagDialog.color\")}\n                    </FormLabel>\n                    <div className={classes.scroll}>\n                        <ToggleButtonGroup\n                            size=\"small\"\n                            value={color}\n                            exclusive\n                            onChange={handleColorChange}\n                            className={classes.textField}\n                        >\n                            {[\n                                theme.palette.text.secondary,\n                                \"#f44336\",\n                                \"#e91e63\",\n                                \"#9c27b0\",\n                                \"#673ab7\",\n                                \"#3f51b5\",\n                                \"#2196f3\",\n                                \"#03a9f4\",\n                                \"#00bcd4\",\n                                \"#009688\",\n                                \"#4caf50\",\n                                \"#cddc39\",\n                                \"#ffeb3b\",\n                                \"#ffc107\",\n                                \"#ff9800\",\n                                \"#ff5722\",\n                                \"#795548\",\n                                \"#9e9e9e\",\n                                \"#607d8b\",\n                            ].map((key, index) => (\n                                <ToggleButton key={index} value={key}>\n                                    <Circle style={{ color: key }} />\n                                </ToggleButton>\n                            ))}\n                        </ToggleButtonGroup>\n                    </div>\n                </DialogContent>\n            )}\n            {value === 1 && (\n                <DialogContent className={classes.dialogContent}>\n                    <TextField\n                        label={t(\"navbar.addTagDialog.tagName\")}\n                        id=\"filled-name\"\n                        value={input[\"tagName\"]}\n                        onChange={handleInputChange(\"tagName\")}\n                        fullWidth\n                        className={classes.textField}\n                    />\n                    <div className={classes.pathSelect}>\n                        <TextField\n                            label={t(\"navbar.addTagDialog.folderPath\")}\n                            id=\"filled-name\"\n                            value={input[\"path\"]}\n                            onChange={handleInputChange(\"path\")}\n                            fullWidth\n                            className={classes.textField}\n                        />\n                        <Button\n                            onClick={() => setPathSelectDialog(true)}\n                            style={{\n                                marginLeft: theme.spacing(1),\n                                alignSelf: \"flex-end\",\n                            }}\n                            color=\"primary\"\n                            variant=\"outlined\"\n                        >\n                            {t(\"common:select\")}\n                        </Button>\n                    </div>\n                </DialogContent>\n            )}\n            <DialogActions>\n                <Button onClick={props.onClose}>{t(\"common:cancel\")}</Button>\n                <div className={classes.wrapper}>\n                    <Button\n                        onClick={submit}\n                        color=\"primary\"\n                        disabled={\n                            loading ||\n                            (value === 0 &&\n                                (input.filename === \"\" ||\n                                    input.tagName === \"\")) ||\n                            (value === 1 &&\n                                (input.tagName === \"\" || input.path === \"\"))\n                        }\n                    >\n                        {t(\"common:ok\")}\n                        {loading && (\n                            <CircularProgress\n                                size={24}\n                                className={classes.buttonProgress}\n                            />\n                        )}\n                    </Button>\n                </div>\n            </DialogActions>\n        </Dialog>\n    );\n}\n"],"sourceRoot":""}