{"version":3,"sources":["component/Share/ReadMe.js"],"names":["useStyles","makeStyles","theme","readMeContainer","marginTop","breakpoints","down","spacing","readMeHeader","padding","display","color","palette","text","secondary","readMeIcon","marginRight","content","border","height","borderTopLeftRadius","borderTopRightRadius","backgroundColor","background","paper","primary","default","type","ReadMe","props","t","useTranslation","classes","useTheme","useState","loading","setLoading","setContent","dispatch","useDispatch","ToggleSnackbar","useCallback","vertical","horizontal","msg","toggleSnackbar","$vm","React","createRef","useEffect","previewPath","file","path","name","API","get","share","key","encodeURIComponent","then","response","rawData","toString","catch","error","message","className","ref","style","boxShadow","borderRadius","value","onChange","preview","toolbar"],"mappings":"kUAaMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,gBAAgB,aACZC,UAAW,IACVF,EAAMG,YAAYC,KAAK,MAAQ,CAC5BF,UAAWF,EAAMK,QAAQ,KAGjCC,aAAc,CACVC,QAAS,YACTC,QAAS,OACTC,MAAOT,EAAMU,QAAQC,KAAKC,WAE9BC,WAAY,CACRC,YAAa,GAEjBC,QAAS,GACT,UAAW,CAEP,iBAAkB,CACdC,OAAQ,kBAEZ,8CAA+C,CAC3CC,OAAQ,eAEZ,mCAAoC,CAChCC,oBAAqB,cACrBC,qBAAsB,eAE1B,qDAAsD,CAClDC,gBAAiBpB,EAAMU,QAAQW,WAAWC,MAAQ,aAClDb,MAAOT,EAAMU,QAAQC,KAAKY,QAAU,cAExC,2CAA4C,CACxCH,gBAAiBpB,EAAMU,QAAQW,WAAWG,QAAU,aACpDf,MAC2B,SAAvBT,EAAMU,QAAQe,KACR,kBACA,kCAGd,4CAA6C,CACzCL,gBAAiBpB,EAAMU,QAAQW,WAAWG,QAAU,cAExD,yCAA0C,CACtCf,MAC2B,SAAvBT,EAAMU,QAAQe,KACR,qBACA,sBAEd,gDAAiD,CAC7CL,gBAAiBpB,EAAMU,QAAQW,WAAWG,QAAU,mBAKjD,SAASE,EAAOC,GAC3B,IAAQC,EAAMC,cAAND,EACFE,EAAUhC,IACVE,EAAQ+B,cAEd,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOjB,EAAP,KAAgBoB,EAAhB,KAEMC,EAAWC,cACXC,EAAiBC,uBACnB,SAACC,EAAUC,EAAYC,EAAKjC,GAA5B,OACI2B,EAASO,YAAeH,EAAUC,EAAYC,EAAKjC,MACvD,CAAC2B,IAGCQ,EAAMC,IAAMC,YA+BlB,OA7BAC,qBAAU,WACNb,GAAW,GACX,IAAMc,EACkB,MAApBrB,EAAMsB,KAAKC,KACLvB,EAAMsB,KAAKC,KAAOvB,EAAMsB,KAAKE,KAC7BxB,EAAMsB,KAAKC,KAAO,IAAMvB,EAAMsB,KAAKE,KAC7CC,IAAIC,IACA,iBACI1B,EAAM2B,MAAMC,IACZ,SACAC,mBAAmBR,IAEtBS,MAAK,SAACC,GACHvB,EAAWuB,EAASC,QAAQC,eAE/BC,OAAM,SAACC,GACJxB,EACI,MACA,QACAV,EAAE,oBAAqB,CAAEc,IAAKoB,EAAMC,UACpC,YAGPN,MAAK,WACFvB,GAAW,QAGpB,CAACP,EAAM2B,MAAO3B,EAAMsB,OAGnB,kBAAC,IAAD,CAAOe,UAAWlC,EAAQ7B,iBACtB,yBAAK+D,UAAWlC,EAAQxB,cACpB,kBAAC,IAAD,CAAU0D,UAAWlC,EAAQjB,aAC7B,kBAAC,IAAD,KAAac,EAAMsB,KAAKE,OAG5B,kBAAC,IAAD,MACA,yBAAKa,UAAWlC,EAAQf,SACnBkB,GAAW,kBAAC,IAAD,OACVA,GACE,kBAAC,IAAD,CACIgC,IAAKrB,EACLsB,MAAO,CACHC,UAAW,OACXC,aAAc,EACdhD,gBAAiBpB,EAAMU,QAAQW,WAAWC,OAE9CL,OAAQ,OACRoD,MAAOtD,EACPuD,SAAU,SAACD,GAAD,OAAWlC,EAAWkC,IAChCE,SAAO,EACPC,QAAS","file":"static/js/13.42d9cff5.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { MenuBook } from \"@material-ui/icons\";\nimport { Typography } from \"@material-ui/core\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextLoading from \"../Placeholder/TextLoading\";\nimport API from \"../../middleware/Api\";\nimport { useDispatch } from \"react-redux\";\nimport Editor from \"for-editor\";\nimport { toggleSnackbar } from \"../../redux/explorer\";\nimport { useTranslation } from \"react-i18next\";\n\nconst useStyles = makeStyles((theme) => ({\n    readMeContainer: {\n        marginTop: 30,\n        [theme.breakpoints.down(\"sm\")]: {\n            marginTop: theme.spacing(2),\n        },\n    },\n    readMeHeader: {\n        padding: \"10px 16px\",\n        display: \"flex\",\n        color: theme.palette.text.secondary,\n    },\n    readMeIcon: {\n        marginRight: 8,\n    },\n    content: {},\n    \"@global\": {\n        //如果嵌套主题，则应该定位[class * =“MuiButton-root”]。\n        \".for-container\": {\n            border: \"none!important\",\n        },\n        \".for-container .for-editor .for-editor-edit\": {\n            height: \"0!important\",\n        },\n        \".for-container > div:first-child\": {\n            borderTopLeftRadius: \"0!important\",\n            borderTopRightRadius: \"0!important\",\n        },\n        \".for-container .for-editor .for-panel .for-preview\": {\n            backgroundColor: theme.palette.background.paper + \"!important\",\n            color: theme.palette.text.primary + \"!important\",\n        },\n        \".for-container .for-markdown-preview pre\": {\n            backgroundColor: theme.palette.background.default + \"!important\",\n            color:\n                theme.palette.type === \"dark\"\n                    ? \"#fff !important\"\n                    : \"rgba(0, 0, 0, 0.87);!important\",\n        },\n\n        \".for-container .for-markdown-preview code\": {\n            backgroundColor: theme.palette.background.default + \"!important\",\n        },\n        \".for-container .for-markdown-preview a\": {\n            color:\n                theme.palette.type === \"dark\"\n                    ? \"#67aeff !important\"\n                    : \"#0366d6 !important\",\n        },\n        \".for-container .for-markdown-preview table th\": {\n            backgroundColor: theme.palette.background.default + \"!important\",\n        },\n    },\n}));\n\nexport default function ReadMe(props) {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const theme = useTheme();\n\n    const [loading, setLoading] = useState(true);\n    const [content, setContent] = useState(\"\");\n\n    const dispatch = useDispatch();\n    const ToggleSnackbar = useCallback(\n        (vertical, horizontal, msg, color) =>\n            dispatch(toggleSnackbar(vertical, horizontal, msg, color)),\n        [dispatch]\n    );\n\n    const $vm = React.createRef();\n\n    useEffect(() => {\n        setLoading(true);\n        const previewPath =\n            props.file.path === \"/\"\n                ? props.file.path + props.file.name\n                : props.file.path + \"/\" + props.file.name;\n        API.get(\n            \"/share/readme/\" +\n                props.share.key +\n                \"?path=\" +\n                encodeURIComponent(previewPath)\n        )\n            .then((response) => {\n                setContent(response.rawData.toString());\n            })\n            .catch((error) => {\n                ToggleSnackbar(\n                    \"top\",\n                    \"right\",\n                    t(\"share.readmeError\", { msg: error.message }),\n                    \"error\"\n                );\n            })\n            .then(() => {\n                setLoading(false);\n            });\n        // eslint-disable-next-line\n    }, [props.share, props.file]);\n\n    return (\n        <Paper className={classes.readMeContainer}>\n            <div className={classes.readMeHeader}>\n                <MenuBook className={classes.readMeIcon} />\n                <Typography>{props.file.name}</Typography>\n            </div>\n\n            <Divider />\n            <div className={classes.content}>\n                {loading && <TextLoading />}\n                {!loading && (\n                    <Editor\n                        ref={$vm}\n                        style={{\n                            boxShadow: \"none\",\n                            borderRadius: 4,\n                            backgroundColor: theme.palette.background.paper,\n                        }}\n                        height={\"100%\"}\n                        value={content}\n                        onChange={(value) => setContent(value)}\n                        preview\n                        toolbar={{}}\n                    />\n                )}\n            </div>\n        </Paper>\n    );\n}\n"],"sourceRoot":""}